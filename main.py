import random

from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputMedia, InputFile,\
    ReplyKeyboardMarkup, KeyboardButton
from game import Game, analyze_game
from database_interaction import *

TOKEN_API = 'TOKEN'

storage = MemoryStorage()
bot = Bot(TOKEN_API)
dispatcher = Dispatcher(bot, storage=storage)


class UserState(StatesGroup):
    file = State()


@dispatcher.message_handler(content_types=['any'], state=UserState.file)
async def get_address(message: types.Message, state):
    file_id = message.document.file_id
    file = await bot.get_file(file_id)
    await bot.download_file(file.file_path, f"{message.from_user.id}.txt")
    await bot.send_message(message.chat.id, '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –°–ª–æ–≤–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ø—Ä–æ—Ñ–∏–ª—å ‚úÖ')
    await state.finish()

stickers_list = [
    'CAACAgIAAxkBAAEIENNkCgRsmUrCEOWqAAGjcOGqwJimybwAAm8AA8GcYAzLDn2LwN1NVi8E',
    'CAACAgIAAxkBAAEIAQhkBEaOqezxBZAqH2nncSJrIfriswACVAADQbVWDGq3-McIjQH6LgQ',
    'CAACAgIAAxkBAAEIENFkCgRWQThlT61o41mTI-DQdxbuSwACIwEAAjDUnRGe2TeBrqpcAi8E',
    'CAACAgIAAxkBAAEIEM9kCgRMNI4rrGxTnrlBaUQ_8t-JlgACbgUAAj-VzAqGOtldiLy3NS8E',
    'CAACAgIAAxkBAAEIEMtkCgQ9FQxjlqfsKiam4Ohk-DeKsQACBQADwDZPE_lqX5qCa011LwQ',
    'CAACAgIAAxkBAAEIEMlkCgQnrCdSYaAvXdPN0OPASfuwvwACEQMAAvPjvgsZbp8lnswsJC8E',
    'CAACAgIAAxkBAAEIENdkCgTm-_jCWE1eMoBB6ZYjNS1fOgACpgADUomRI2u5KhCNt8e8LwQ',
    'CAACAgIAAxkBAAEIG_NkDiH6F9jpoSDnysf67MWH6eekeAACpRAAArRFoEpqI1qAWc6jRy8E',
    'CAACAgIAAxkBAAEIG_VkDiH_NN1C05If-NuEQqXIvsvhmgAC2A8AAkjyYEsV-8TaeHRrmC8E'
]


def get_keyboard(game):
    keyboard = InlineKeyboardMarkup(row_width=11)
    btns = []
    for elem in game.get_buttons_line():
        btns.append(InlineKeyboardButton(text=elem, callback_data=elem))
    keyboard.add(btns[0], btns[1], btns[2], btns[3], btns[4], btns[5], btns[6], btns[7])
    keyboard.add(btns[8], btns[9], btns[10], btns[11], btns[12], btns[13], btns[14], btns[15])
    keyboard.add(btns[16], btns[17], btns[18], btns[19], btns[20], btns[21], btns[22], btns[23])
    keyboard.add(btns[24], btns[25], btns[26], btns[27], btns[28], btns[29], btns[30], btns[31])
    if game.use_clue[0] == '1':
        btn1 = InlineKeyboardButton(text='‚úÖ –û—Ç–∫—Ä—ã—Ç—å –±—É–∫–≤—É', callback_data='open_letter')
        keyboard.add(btn1)
    if game.use_clue[1] == '1':
        btn2 = InlineKeyboardButton(text='üí≠ –ó–Ω–∞—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞', callback_data='meaning')
        keyboard.add(btn2)
    if game.use_clue[2] == '1':
        btn3 = InlineKeyboardButton(text='üîÇ –£–±—Ä–∞—Ç—å 3 –±—É–∫–≤—ã', callback_data='delete_letter')
        keyboard.add(btn3)
    btn4 = InlineKeyboardButton(text='‚ùå –ó–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É', callback_data='stop_play')
    keyboard.add(btn4)
    return keyboard


@dispatcher.message_handler(commands=['start_play'])
async def give_word(message):
    game = Game()  # –ö–ª–∞—Å—Å –∏–≥—Ä—ã
    game.generate_word()  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    cort = get_from_stat(message.from_user.id)
    cort_new = cort[1], cort[2], cort[3] + 1, cort[4]
    update_base_stat(message.from_user.id, cort_new)

    if not check_base(message.from_user.id):  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–¥
        append_to_base(message.from_user.id, game.encode())
    else:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–¥
        update_base(message.from_user.id, game.encode())

    keyboard = get_keyboard(game)
    await bot.send_photo(
        message.from_user.id,
        open('images/6.png', 'rb'),
        f'–Ø –∑–∞–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ. –ü–æ–ø—Ä–æ–±—É–π –æ—Ç–≥–∞–¥–∞—Ç—å:\n{game.get_string()}',
        parse_mode='HTML',
        reply_markup=keyboard,
    )


@dispatcher.message_handler(commands=['start'])
async def welcome(message: types.Message):
    game = Game()
    game.generate_word()

    if not check_base(message.from_user.id):
        append_to_base(message.from_user.id, game.encode())
        append_to_statistics(message.from_user.id)

    keyboard = ReplyKeyboardMarkup()
    keyboard.add(KeyboardButton('–û–± –∞–≤—Ç–æ—Ä–µ'), KeyboardButton('–û –ø—Ä–æ–µ–∫—Ç–µ'), KeyboardButton('–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å'))

    await bot.send_sticker(
        message.from_user.id,
        sticker=random.choice(stickers_list),
        # reply_markup=keyboard
    )
    text = f'''–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø - <b> –ë–æ—Ç –í–∏—Å–µ–ª–∏—Ü–∞</b>. –°–æ –º–Ω–æ–π —Ç—ã –º–æ–∂–µ—à—å —Å—ã–≥—Ä–∞—Ç—å –≤
–∏–≥—Ä—É, —è –∑–∞–≥–∞–¥—ã–≤–∞—é —Å–ª–æ–≤–æ - —Ç–≤–æ—è –∑–∞–¥–∞—á–∞ –µ–≥–æ —É–≥–∞–¥–∞—Ç—å. –£ —Ç–µ–±—è –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞—Ç—å –ª—é–±—É—é –±—É–∫–≤—É —Ä—É—Å—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞. ‚ö†Ô∏è

–ï—Å–ª–∏ —Ç—ã 6 —Ä–∞–∑ –Ω–∞–∑–æ–≤–µ—à—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é –±—É–∫–≤—É, —É–≤—ã, –ø—Ä–æ–∏–≥—Ä–∞–µ—à—å. –¢–∞–∫–∂–µ —è –¥–∞—é –ø–æ–¥—Å–∫–∞–∑–∫–∏ (–∫–∞–∂–¥—É—é 1 —Ä–∞–∑):
1) –ù–∞–∑–≤–∞—Ç—å 3 –±—É–∫–≤—ã, –∫–æ—Ç–æ—Ä—ã—Ö —Ç–æ—á–Ω–æ –Ω–µ—Ç –≤ —Å–ª–æ–≤–µ ‚ùå
2) –û—Ç–∫—Ä—ã—Ç—å 1 –±—É–∫–≤—É –∏–∑ —Å–ª–æ–≤–∞ ‚úÖ
3) –°–∫–∞–∑–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞ üí¨

–ù–∞–≤–µ—Ä–Ω–æ–µ, —Ç–µ–±–µ –æ—Å—Ç–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –ª–∏—à—å —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º, —Ç—É—Ç –≤—Å–µ –ø—Ä–æ—Å—Ç–æ - –∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∏ –ø–æ–ª—É—á–∞–π —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ!üôÇ
<i>–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–∞–∂–º–∏ —Å—é–¥–∞ üëâ /start_play</i>
    '''

    keyboard = InlineKeyboardMarkup(row_width=11)
    btn1 = InlineKeyboardButton(text='–ò–≥—Ä–∞—Ç—å üé≤', callback_data='start_play')
    btn2 = InlineKeyboardButton(text='–°–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É üìà', callback_data='see_static')
    btn3 = InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–∏ —Å–ª–æ–≤–∞ ‚úèÔ∏è', callback_data='append_words')
    btn4 = InlineKeyboardButton(text='–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–ª–æ–≤–∞—Ä–∏ ‚öô', callback_data='settings')
    keyboard.add(btn1)
    keyboard.add(btn2)
    keyboard.add(btn3)
    keyboard.add(btn4)

    await message.answer(
        text=text,
        parse_mode='HTML',
        reply_markup=keyboard
    )


@dispatcher.message_handler(commands=['help'])
async def helps(message: types.Message):
    text = '''
    –ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã:
/start - –∑–∞–ø—É—Å–∫
/help - –≤—ã–≤–æ–¥–∏—Ç –¥–∞–Ω–Ω–æ–µ –æ–∫–Ω–æ
/start_play - –ø–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –∑–∞–≥–∞–¥—ã–≤–∞–µ—Ç —Å–ª–æ–≤–æ
    '''
    await message.answer(text=text, parse_mode='HTML')


@dispatcher.callback_query_handler()
async def callback(callback):
    if callback.data in ['start_play', 'see_static', 'append_words']:
        if callback.data == 'start_play':
            await give_word(callback)

        elif callback.data == 'see_static':
            data = get_from_stat(callback.from_user.id)
            text = f'''<b>====–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:====</b>
–í—Å–µ–≥–æ –ø–æ–±–µ–¥: {data[1]} üèÜ
–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è –ø–æ–±–µ–¥: {data[2]} üö©
–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ –∏–≥—Ä: {data[3]} üè≥Ô∏è
–í—ã–∏–≥—Ä–∞–Ω–æ –¥—Ä—É–∂–µ—Å–∫–∏—Ö –∏–≥—Ä: {data[4]} ü§ù
'''
            await bot.send_message(callback.from_user.id, text=text, parse_mode='HTML')

        elif callback.data == 'append_words':
            text = '''–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Ñ–æ—Ä–º–∞—Ç–∞ .txt, 
–≥–¥–µ –±—É–¥—É—Ç –Ω–∞ –∫–∞–∂–¥–æ–π –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤–∞—à–∏ —Å–ª–æ–≤–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
(–°–ª–æ–≤–æ):(–ó–Ω–∞—á–µ–Ω–∏–µ).
<i>–ü—Ä–∏–º–µ—Ä —Ç–∞–∫–æ–≥–æ —Ñ–∞–π–ª–∞: </i>'''
            await bot.send_message(callback.from_user.id, text=text, parse_mode='HTML')
            await bot.send_document(callback.from_user.id, open('test.txt', 'r'))
            await UserState.file.set()

    elif callback.data in ['open_letter', 'meaning', 'stop_play', 'delete_letter', 'stop']:
        if callback.data == 'stop_play':
            await callback.message.answer(
                text=f'–ò–≥—Ä–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞',
                parse_mode='HTML',
            )

            await callback.message.delete()

        if callback.data == 'stop':
            await callback.message.delete()

        elif callback.data == 'meaning':
            game = Game()
            game.decode(get_from_base(callback.from_user.id))
            game.use_clue = f"{game.use_clue[0]}0{game.use_clue[2]}"
            update_base(callback.from_user.id, game.encode())

            keyboard = get_keyboard(game)
            text = f'<i><b>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</b></i> \n{game.get_meaning()}'
            file = InputMedia(media=InputFile(
                f'images/{game.live}.png'),
                caption=f"–Ø –∑–∞–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ. –ü–æ–ø—Ä–æ–±—É–π –æ—Ç–≥–∞–¥–∞—Ç—å:\n{game.get_string()}")

            await callback.message.edit_media(file, reply_markup=keyboard)
            await bot.send_message(callback.from_user.id, text=text, parse_mode='HTML')

        elif callback.data == 'delete_letter':
            game = Game()
            game.decode(get_from_base(callback.from_user.id))
            game.use_clue = f"{game.use_clue[0]}{game.use_clue[1]}0"
            game.delete_letters()

            update_base(callback.from_user.id, game.encode())

            keyboard = get_keyboard(game)
            file = InputMedia(media=InputFile(
                f'images/{game.live}.png'),
                caption=f"–Ø –∑–∞–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ. –ü–æ–ø—Ä–æ–±—É–π –æ—Ç–≥–∞–¥–∞—Ç—å:\n{game.get_string()}")
            await callback.message.edit_media(file, reply_markup=keyboard)

        elif callback.data == 'open_letter':
            game = Game()
            game.decode(get_from_base(callback.from_user.id))
            game.get_letter()
            game.use_clue = f"0{game.use_clue[1]}{game.use_clue[2]}"
            update_base(callback.from_user.id, game.encode())

            keyboard = get_keyboard(game)
            file = InputMedia(media=InputFile(
                f'images/{game.live}.png'),
                caption=f"–Ø –∑–∞–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ. –ü–æ–ø—Ä–æ–±—É–π –æ—Ç–≥–∞–¥–∞—Ç—å:\n{game.get_string()}")
            await callback.message.edit_media(file, reply_markup=keyboard)

    elif 'aw: ' in callback.data:
        await callback.message.delete()
        word, letters = callback.data[4:].split('. ')
        result = analyze_game(word, letters)
        message = ''

        for idx in range(1, len(letters)):
            result_elem = sorted(result[idx].items(), key=lambda x: x[1])
            message += f'\n<b>–í–∞—à —Ö–æ–¥: {letters[idx]}</b>'

            if letters[idx] == result_elem[-1][0]:
                message += f'\n–•–æ–¥ –Ω–æ–º–µ—Ä {idx + 1}! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Ö–æ–¥ –ª–æ–≥–∏—á–Ω—ã–π ‚úÖ'
            else:
                message += f'\n–•–æ–¥ –Ω–æ–º–µ—Ä {idx + 1}! –•–æ–¥ –Ω–µ–ª–æ–≥–∏—á–Ω—ã–π ‚ùå'

            message += '\n–õ—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ö–æ–¥–æ–≤:'
            message += f'\n 1) {result_elem[-1][0]}: {str(result_elem[-1][1] * 100)[:4]}%'
            message += f'\n 2) {result_elem[-2][0]}: {str(result_elem[-2][1] * 100)[:4]}%'
            message += f'\n 3) {result_elem[-3][0]}: {str(result_elem[-3][1] * 100)[:4]}%'
            message += '\n======================='

        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton(
            text='–ó–∞–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ‚ùå', callback_data='stop'
        ))

        await bot.send_message(
            chat_id=callback.from_user.id,
            text=message,
            parse_mode='HTML',
            reply_markup=keyboard
        )

    else:
        game = Game()
        game.decode(get_from_base(callback.from_user.id))

        if callback.data != ' ':
            game.use_letter(callback.data.lower())
            game.all_letters += callback.data.lower()
            update_base(callback.from_user.id, game.encode())

        flag = True

        for elem in game.word:
            if elem not in game.guessed_letters:
                flag = False

        if game.live < 1:
            cort = get_from_stat(callback.from_user.id)
            cort_new = cort[1], 0, cort[3], cort[4]
            update_base_stat(callback.from_user.id, cort_new)

            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton(
                text='–ò–≥—Ä–∞—Ç—å üé≤', callback_data='start_play'
            ))

            keyboard.add(InlineKeyboardButton(
                text='–ó–∞–≤–µ—Ä—à–∏—Ç—å ‚ùå', callback_data='stop'
            ))

            keyboard.add(InlineKeyboardButton(
                text='–ê–Ω–∞–ª–∏–∑ –∏–≥—Ä—ã üìà', callback_data=f'aw: {game.word}.{game.all_letters}'
            ))

            await bot.send_message(
                chat_id=callback.from_user.id,
                text=f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏:( –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞?',
                parse_mode='HTML',
                reply_markup=keyboard
            )

            await callback.message.delete()
        elif flag:
            cort = get_from_stat(callback.from_user.id)
            cort_new = cort[1] + 1, cort[2] + 1, cort[3], cort[4]
            update_base_stat(callback.from_user.id, cort_new)

            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton(
                text='–ò–≥—Ä–∞—Ç—å üé≤', callback_data='start_play'
            ))

            keyboard.add(InlineKeyboardButton(
                text='–ó–∞–≤–µ—Ä—à–∏—Ç—å ‚ùå', callback_data='stop'
            ))

            keyboard.add(InlineKeyboardButton(
                text='–ê–Ω–∞–ª–∏–∑ –∏–≥—Ä—ã üìà', callback_data=f'aw: {game.word}.{game.all_letters}'
            ))

            await bot.send_message(
                chat_id=callback.from_user.id,
                text=f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã —É–≥–∞–¥–∞–ª–∏ —Å–ª–æ–≤–æ! –•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â—ë?',
                parse_mode='HTML',
                reply_markup=keyboard
            )

            await callback.message.delete()

        else:
            keyboard = get_keyboard(game)

            file = InputMedia(media=InputFile(
                f'images/{game.live}.png'),
                caption=f"–Ø –∑–∞–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ. –ü–æ–ø—Ä–æ–±—É–π –æ—Ç–≥–∞–¥–∞—Ç—å:\n{game.get_string()}")

            await callback.message.edit_media(file, reply_markup=keyboard)


@dispatcher.message_handler(content_types=['any'])
async def all_message(message):
    try:
        await bot.send_message(message['contact']['user_id'], 'Hello')
        await bot.send_message(message.from_user.id, '–≠—Ç–æ –∫–æ–Ω—Ç–∞–∫—Ç')

    except TypeError:
        await bot.send_message(message.from_user.id, '–ß—Ç–æ –∂ —Ç–µ–±–µ –æ—Ç–≤–µ—Ç–∏—Ç—å..')


if __name__ == '__main__':
    executor.start_polling(dispatcher)
