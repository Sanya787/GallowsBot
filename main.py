import json
import random
import sqlite3

from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputMedia, InputFile, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

TOKEN_API = 'TOKEN'

bot = Bot(TOKEN_API)
dispatcher = Dispatcher(bot)

stickers_list = [
    'CAACAgIAAxkBAAEIENNkCgRsmUrCEOWqAAGjcOGqwJimybwAAm8AA8GcYAzLDn2LwN1NVi8E',
    'CAACAgIAAxkBAAEIAQhkBEaOqezxBZAqH2nncSJrIfriswACVAADQbVWDGq3-McIjQH6LgQ',
    'CAACAgIAAxkBAAEIENFkCgRWQThlT61o41mTI-DQdxbuSwACIwEAAjDUnRGe2TeBrqpcAi8E',
    'CAACAgIAAxkBAAEIEM9kCgRMNI4rrGxTnrlBaUQ_8t-JlgACbgUAAj-VzAqGOtldiLy3NS8E',
    'CAACAgIAAxkBAAEIEMtkCgQ9FQxjlqfsKiam4Ohk-DeKsQACBQADwDZPE_lqX5qCa011LwQ',
    'CAACAgIAAxkBAAEIEMlkCgQnrCdSYaAvXdPN0OPASfuwvwACEQMAAvPjvgsZbp8lnswsJC8E',
    'CAACAgIAAxkBAAEIENdkCgTm-_jCWE1eMoBB6ZYjNS1fOgACpgADUomRI2u5KhCNt8e8LwQ'
]

def append_to_base(id, data):
    connection = sqlite3.connect('database.db')
    cursor = connection.cursor()
    query = f'''INSERT INTO users (id, class) 
    VALUES({id}, "{data}");'''
    cursor.execute(query)
    connection.commit()
    connection.close()


def update_base(id, new_data):
    connection = sqlite3.connect('database.db')
    cursor = connection.cursor()
    print(new_data)
    query = f'''UPDATE users
SET class = "{new_data}"
WHERE id = {id};'''
    cursor.execute(query)
    connection.commit()
    connection.close()


def check_base(id):
    connection = sqlite3.connect('database.db')
    cursor = connection.cursor()
    query = f'''SELECT class FROM users
    WHERE id = {id}'''
    cursor.execute(query)
    if cursor.fetchall():
        return True
    return False


def get_from_base(id):
    connection = sqlite3.connect('database.db')
    cursor = connection.cursor()
    query = f'''SELECT class FROM users
WHERE id = {id}'''
    cursor.execute(query)
    return cursor.fetchall()[0][0]


class Play:
    def __init__(self):
        self.word = ' '
        self.meaning = ' '
        self.live = 6
        self.guessed_letters = ' '
        self.all_letters = ' '
        self.buttons_line = '–ê–ë–í–ì–î–ï–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–©–®–¨–´–™–≠–Æ–Ø'

    def encode(self):
        string = ''
        for elem in self.guessed_letters:
            string += elem
        string2 = ''
        for elem in self.all_letters:
            string2 += elem
        return '---'.join([self.word, self.meaning, str(self.live), string, string2])

    def decode(self, string):
        self.word, self.meaning, self.live, self.guessed_letters, self.all_letters = string.split('---')
        self.live = int(self.live)

    def get_string(self):
        answer = ''
        for elem in self.word:
            if elem in self.guessed_letters:
                answer += elem
            else:
                answer += '-'
        return answer

    def get_buttons_line(self):
        string = ''
        for elem in self.buttons_line:
            if elem.lower() in self.all_letters:
                string += ' '
            else:
                string += elem
        return string

    def generate_word(self):
        with open('words.json') as cat_file:
            f = cat_file.read()
            data = json.loads(f)
            key = random.choice(list(data.items()))
        self.word = key[0]
        self.meaning = key[1]['definition']
        self.guessed_letters += self.word[0]
        self.buttons_line = '–ê–ë–í–ì–î–ï–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–©–®–¨–´–™–≠–Æ–Ø'
        self.all_letters = ' '
        self.live = 6

    def use_letter(self, letter):
        if letter in self.word:
            self.guessed_letters += letter
        else:
            self.live -= 1

    def get_meaning(self):
        return self.meaning


@dispatcher.message_handler(commands=['start_play'])
async def give_word(message):
    play = Play()  # –ö–ª–∞—Å—Å –∏–≥—Ä—ã
    play.generate_word()  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞

    if not check_base(message.from_user.id):  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–¥
        append_to_base(message.from_user.id, play.encode())
    else:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–¥
        update_base(message.from_user.id, play.encode())

    keyboard = InlineKeyboardMarkup(row_width=11)
    btns = []
    for elem in play.get_buttons_line():
        if elem == ' ':
            btns.append(InlineKeyboardButton(text=''))
        else:
            btns.append(InlineKeyboardButton(text=elem, callback_data=elem))
    keyboard.add(btns[0], btns[1], btns[2], btns[3], btns[4], btns[5], btns[6], btns[7])
    keyboard.add(btns[8], btns[9], btns[10], btns[11], btns[12], btns[13], btns[14], btns[15])
    keyboard.add(btns[16], btns[17], btns[18], btns[19], btns[20], btns[21], btns[22], btns[23])
    keyboard.add(btns[24], btns[25], btns[26], btns[27], btns[28], btns[29], btns[30], btns[31])
    await bot.send_photo(
        message.chat.id,
        open('images/6.png', 'rb'),
        f'–Ø –∑–∞–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ. –ü–æ–ø—Ä–æ–±—É–π –æ—Ç–≥–∞–¥–∞—Ç—å:\n{play.get_string()}',
        parse_mode='HTML',
        reply_markup=keyboard,
    )


@dispatcher.message_handler(commands=['start'])
async def welcome(message: types.Message):
    play = Play()
    play.generate_word()

    if not check_base(message.from_user.id):
        append_to_base(message.from_user.id, play.encode())

    await bot.send_sticker(
        message.from_user.id,
        sticker=random.choice(stickers_list)
    )
    text = f'''–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø - <b> –ë–æ—Ç –í–∏—Å–µ–ª–∏—Ü–∞</b>. –°–æ –º–Ω–æ–π —Ç—ã –º–æ–∂–µ—à—å —Å—ã–≥—Ä–∞—Ç—å –≤
–∏–≥—Ä—É, —è –∑–∞–≥–∞–¥—ã–≤–∞—é —Å–ª–æ–≤–æ - —Ç–≤–æ—è –∑–∞–¥–∞—á–∞ –µ–≥–æ —É–≥–∞–¥–∞—Ç—å. –£ —Ç–µ–±—è –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞—Ç—å –ª—é–±—É—é –±—É–∫–≤—É —Ä—É—Å—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞. ‚ö†Ô∏è

–ï—Å–ª–∏ —Ç—ã 6 —Ä–∞–∑ –Ω–∞–∑–æ–≤–µ—à—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é –±—É–∫–≤—É, —É–≤—ã, –ø—Ä–æ–∏–≥—Ä–∞–µ—à—å. –¢–∞–∫–∂–µ —è –¥–∞—é –ø–æ–¥—Å–∫–∞–∑–∫–∏ (–∫–∞–∂–¥—É—é 1 —Ä–∞–∑):
1) –ù–∞–∑–≤–∞—Ç—å 3 –±—É–∫–≤—ã, –∫–æ—Ç–æ—Ä—ã—Ö —Ç–æ—á–Ω–æ –Ω–µ—Ç –≤ —Å–ª–æ–≤–µ ‚ùå
2) –û—Ç–∫—Ä—ã—Ç—å 1 –±—É–∫–≤—É –∏–∑ —Å–ª–æ–≤–∞ ‚úÖ
3) –°–∫–∞–∑–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞ üí¨

–ù–∞–≤–µ—Ä–Ω–æ–µ, —Ç–µ–±–µ –æ—Å—Ç–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –ª–∏—à—å —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º, —Ç—É—Ç –≤—Å–µ –ø—Ä–æ—Å—Ç–æ - –∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∏ –ø–æ–ª—É—á–∞–π —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ!üôÇ
<i>–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–∞–∂–º–∏ —Å—é–¥–∞ üëâ /start_play</i>
    '''
    await message.answer(
        text=text,
        parse_mode='HTML',
    )


@dispatcher.message_handler(commands=['help'])
async def helps(message: types.Message):
    text = '''
    –ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã:
/start - –∑–∞–ø—É—Å–∫
/help - –≤—ã–≤–æ–¥–∏—Ç –¥–∞–Ω–Ω–æ–µ –æ–∫–Ω–æ
/start_play - –ø–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –∑–∞–≥–∞–¥—ã–≤–∞–µ—Ç —Å–ª–æ–≤–æ
    '''
    await message.answer(text=text, parse_mode='HTML')


@dispatcher.callback_query_handler()
async def callback(callback):
    play = Play()
    play.decode(get_from_base(callback.from_user.id))
    if callback.data != ' ':
        play.use_letter(callback.data.lower())
        play.all_letters += callback.data.lower()
        update_base(callback.from_user.id, play.encode())
    flag = True
    for elem in play.word:
        if elem not in play.guessed_letters:
            flag = False
    if play.live < 1:
        await callback.message.answer(
            text=f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏:(',
            parse_mode='HTML',
        )
        await callback.message.delete()
    elif flag:
        await callback.message.answer(
            text=f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã —É–≥–∞–¥–∞–ª–∏ —Å–ª–æ–≤–æ!',
            parse_mode='HTML',
        )
        await callback.message.delete()

    else:
        keyboard = InlineKeyboardMarkup(row_width=11)
        btns = []
        for elem in play.get_buttons_line():
            btns.append(InlineKeyboardButton(text=elem, callback_data=elem))
        keyboard.add(btns[0], btns[1], btns[2], btns[3], btns[4], btns[5], btns[6], btns[7])
        keyboard.add(btns[8], btns[9], btns[10], btns[11], btns[12], btns[13], btns[14], btns[15])
        keyboard.add(btns[16], btns[17], btns[18], btns[19], btns[20], btns[21], btns[22], btns[23])
        keyboard.add(btns[24], btns[25], btns[26], btns[27], btns[28], btns[29], btns[30], btns[31])
        btn1 = InlineKeyboardButton(text='–û—Ç–∫—Ä—ã—Ç—å –±—É–∫–≤—É', callback_data='open_letter')
        btn2 = InlineKeyboardButton(text='–ó–Ω–∞—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞', callback_data='meaning')
        btn3 = InlineKeyboardButton(text='–£–±—Ä–∞—Ç—å 3 –±—É–∫–≤—ã', callback_data='delete_letter')
        btn4 = InlineKeyboardButton(text='–ó–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É', callback_data='stop_play')
        keyboard.add(btn1)
        keyboard.add(btn2)
        keyboard.add(btn3)
        keyboard.add(btn4)
        file = InputMedia(media=InputFile(
            f'images/{play.live}.png'),
            caption=f"–Ø –∑–∞–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ. –ü–æ–ø—Ä–æ–±—É–π –æ—Ç–≥–∞–¥–∞—Ç—å:\n{play.get_string()}")
        await callback.message.edit_media(file, reply_markup=keyboard)


if __name__ == '__main__':
    executor.start_polling(dispatcher)

